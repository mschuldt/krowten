    //this does the work for Board.hasNetwork(int)
    private boolean hasNetwork(Piece currentPiece, long bitBoard, long memberPieces,long goalmask,
                               int m, int b, int depth){
        int newM, newB;

        Piece[] connectedPieces = currentPiece.connected;
        Piece piece = connectedPieces[0];

        if (piece != null && piece.color == currentPiece.color){
            if (piece.x == currentPiece.x){
                newM = 10;
                newB = piece.x;
            }else{
                newM = (piece.y - currentPiece.y)/(piece.x - currentPiece.x);
                newB = piece.y - newM*piece.x;
            }
            if ((newM != m) || (newB != b)){ //on different line
                if ((piece.bitRep & goalmask) != 0){
                    if (depth >= 5){//5 because depth does not include this 'piece'
                        return true;
                    }
                }else{
                    if ((piece.bitRep & memberPieces) == 0){
                        // we have not visited this piece
                        if (hasNetwork(piece, bitBoard, memberPieces | currentPiece.bitRep, goalmask, newM, newB, depth+1)){
                            return true;
                        }
                    }
                }
            }
        }

        piece = connectedPieces[1];
        if (piece != null && piece.color == currentPiece.color){
            if (piece.x == currentPiece.x){
                newM = 10;
                newB = piece.x;
            }else{
                newM = (piece.y - currentPiece.y)/(piece.x - currentPiece.x);
                newB = piece.y - newM*piece.x;
            }
            if ((newM != m) || (newB != b)){ //on different line
                if ((piece.bitRep & goalmask) != 0){
                    if (depth >= 5){//5 because depth does not include this 'piece'
                        return true;
                    }
                }else{
                    if ((piece.bitRep & memberPieces) == 0){
                        // we have not visited this piece
                        if (hasNetwork(piece, bitBoard, memberPieces | currentPiece.bitRep, goalmask, newM, newB, depth+1)){
                            return true;
                        }
                    }
                }
            }
        }
        piece = connectedPieces[2];
        if (piece != null && piece.color == currentPiece.color){
            if (piece.x == currentPiece.x){
                newM = 10;
                newB = piece.x;
            }else{
                newM = (piece.y - currentPiece.y)/(piece.x - currentPiece.x);
                newB = piece.y - newM*piece.x;
            }
            if ((newM != m) || (newB != b)){ //on different line
                if ((piece.bitRep & goalmask) != 0){
                    if (depth >= 5){//5 because depth does not include this 'piece'
                        return true;
                    }
                }else{
                    if ((piece.bitRep & memberPieces) == 0){
                        // we have not visited this piece
                        if (hasNetwork(piece, bitBoard, memberPieces | currentPiece.bitRep, goalmask, newM, newB, depth+1)){
                            return true;
                        }
                    }
                }
            }
        }
        piece = connectedPieces[3];
        if (piece != null && piece.color == currentPiece.color){
            if (piece.x == currentPiece.x){
                newM = 10;
                newB = piece.x;
            }else{
                newM = (piece.y - currentPiece.y)/(piece.x - currentPiece.x);
                newB = piece.y - newM*piece.x;
            }
            if ((newM != m) || (newB != b)){ //on different line
                if ((piece.bitRep & goalmask) != 0){
                    if (depth >= 5){//5 because depth does not include this 'piece'
                        return true;
                    }
                }else{
                    if ((piece.bitRep & memberPieces) == 0){
                        // we have not visited this piece
                        if (hasNetwork(piece, bitBoard, memberPieces | currentPiece.bitRep, goalmask, newM, newB, depth+1)){
                            return true;
                        }
                    }
                }
            }
        }
        piece = connectedPieces[4];
        if (piece != null && piece.color == currentPiece.color){
            if (piece.x == currentPiece.x){
                newM = 10;
                newB = piece.x;
            }else{
                newM = (piece.y - currentPiece.y)/(piece.x - currentPiece.x);
                newB = piece.y - newM*piece.x;
            }
            if ((newM != m) || (newB != b)){ //on different line
                if ((piece.bitRep & goalmask) != 0){
                    if (depth >= 5){//5 because depth does not include this 'piece'
                        return true;
                    }
                }else{
                    if ((piece.bitRep & memberPieces) == 0){
                        // we have not visited this piece
                        if (hasNetwork(piece, bitBoard, memberPieces | currentPiece.bitRep, goalmask, newM, newB, depth+1)){
                            return true;
                        }
                    }
                }
            }
        }
        piece = connectedPieces[5];
        if (piece != null && piece.color == currentPiece.color){
            if (piece.x == currentPiece.x){
                newM = 10;
                newB = piece.x;
            }else{
                newM = (piece.y - currentPiece.y)/(piece.x - currentPiece.x);
                newB = piece.y - newM*piece.x;
            }
            if ((newM != m) || (newB != b)){ //on different line
                if ((piece.bitRep & goalmask) != 0){
                    if (depth >= 5){//5 because depth does not include this 'piece'
                        return true;
                    }
                }else{
                    if ((piece.bitRep & memberPieces) == 0){
                        // we have not visited this piece
                        if (hasNetwork(piece, bitBoard, memberPieces | currentPiece.bitRep, goalmask, newM, newB, depth+1)){
                            return true;
                        }
                    }
                }
            }
        }
        piece = connectedPieces[6];
        if (piece != null && piece.color == currentPiece.color){
            if (piece.x == currentPiece.x){
                newM = 10;
                newB = piece.x;
            }else{
                newM = (piece.y - currentPiece.y)/(piece.x - currentPiece.x);
                newB = piece.y - newM*piece.x;
            }
            if ((newM != m) || (newB != b)){ //on different line
                if ((piece.bitRep & goalmask) != 0){
                    if (depth >= 5){//5 because depth does not include this 'piece'
                        return true;
                    }
                }else{
                    if ((piece.bitRep & memberPieces) == 0){
                        // we have not visited this piece
                        if (hasNetwork(piece, bitBoard, memberPieces | currentPiece.bitRep, goalmask, newM, newB, depth+1)){
                            return true;
                        }
                    }
                }
            }
        }
        piece = connectedPieces[7];
        if (piece != null && piece.color == currentPiece.color){
            if (piece.x == currentPiece.x){
                newM = 10;
                newB = piece.x;
            }else{
                newM = (piece.y - currentPiece.y)/(piece.x - currentPiece.x);
                newB = piece.y - newM*piece.x;
            }
            if ((newM != m) || (newB != b)){ //on different line
                if ((piece.bitRep & goalmask) != 0){
                    if (depth >= 5){//5 because depth does not include this 'piece'
                        return true;
                    }
                }else{
                    if ((piece.bitRep & memberPieces) == 0){
                        // we have not visited this piece
                        if (hasNetwork(piece, bitBoard, memberPieces | currentPiece.bitRep, goalmask, newM, newB, depth+1)){
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    }

#+options: num:nil
each method that is part of a separate module is marked with 'M:'

everything in the board is one module except for the network finder
* list of modules
 1. board representation (Michael)
 2. performing minimax tree search  (Michelle)
 3. generating a list of all valid moves (Hellen)
 4. determining whether a move is valid (Hellen)
 5. cluster detection (Michelle)
 6. network finder (Michael)
 7. board evaluation function (Shared..for now)
* interfaces organized by class
** Piece
*** fields
int color
int x
int y
** M: Board 
*** constructor
 public Board(color C);
*** move a piece
  void move(Move M);
*** unmove a piece
  void unMove(Move M);
*** get adjacent pieces
  Piece[] adjacentPieces(int x, int y);
  Piece[] adjacentPieces(Piece P);
*** get connected pieces
  Piece[] connectedPieces(Piece P);
  Piece[] connectedPieces(int x, int y);
*** does a square contain a piece?
  boolean pieceAt(int x, int y);
*** get a the piece at a location
  Piece getPiece(int x, int y);
*** M: network finder
  boolean hasNetwork(Player P);
** MachinePlayer
*** M: performing minimax tree search 
   public Move chooseMove(Player P);
*** M: generating a list of all valid moves
   Move[] validMoves(Board B, Player P);
*** M: determining whether a move is valid
   Boolean isValidMove(Board B, Move M, Player P);
*** M: determining whether a move will result in the formation of a cluster >= 3
   boolean formsIllegalCluster(Board M, Move M, Player P);
*** M: board evaluation function
   int scoreBoard(Board B, Player P);
*** move opponents piece
   public boolean opponentMove(Move m);
*** force a move
   public boolean forceMove(Move m);

